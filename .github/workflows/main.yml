name: CI/CD Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}
  VERSION: ${{ github.sha }}
  NAME: ${{ github.repository_id }}
  BLUE_PORT: 3000
  GREEN_PORT: 3001
  PROD_PORT: 3000

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile') }}-
            ${{ runner.os }}-buildx-

      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-go ]
    if: github.event_name != 'pull_request'
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Check current deployment
        id: current
        run: |
          CURRENT_PORT=$(docker ps --filter "name=${{ env.NAME }}-blue" --format "{{.Ports}}" | grep -o "0.0.0.0:3000" || true)
          if [ ! -z "$CURRENT_PORT" ]; then
            echo "current_container=blue" >> $GITHUB_OUTPUT
            echo "deploy_container=green" >> $GITHUB_OUTPUT
            echo "current_port=${{ env.BLUE_PORT }}" >> $GITHUB_OUTPUT
            echo "deploy_port=${{ env.GREEN_PORT }}" >> $GITHUB_OUTPUT
          else
            echo "current_container=green" >> $GITHUB_OUTPUT
            echo "deploy_container=blue" >> $GITHUB_OUTPUT
            echo "current_port=${{ env.GREEN_PORT }}" >> $GITHUB_OUTPUT
            echo "deploy_port=${{ env.BLUE_PORT }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy new container
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          
          docker stop ${{ env.NAME }}-${{ steps.current.outputs.deploy_container }} || true
          docker rm ${{ env.NAME }}-${{ steps.current.outputs.deploy_container }} || true
          
          docker run -d \
            --name ${{ env.NAME }}-${{ steps.current.outputs.deploy_container }} \
            -p ${{ steps.current.outputs.deploy_port }}:3000 \
            --restart always \
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          
          for i in {1..30}; do
            if curl -s http://localhost:${{ steps.current.outputs.deploy_port }}/health; then
              echo "New container is healthy"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Health check failed"
              exit 1
            fi
            sleep 2
          done

      - name: Switch traffic
        run: |
          echo "Switching traffic to port ${{ steps.current.outputs.deploy_port }}"
          
          if [ ! -z "${{ steps.current.outputs.current_container }}" ]; then
            docker stop ${{ env.NAME }}-${{ steps.current.outputs.current_container }} || true
            docker rm ${{ env.NAME }}-${{ steps.current.outputs.current_container }} || true
          fi
          
          docker image prune -af